##
## Preprocessor
# #include <...>
snippet inc
	#include <${1:filename}>

# ifndef...define...endif
snippet ndef
	#ifndef $1
	  #define ${1:SYMBOL} ${2:value}
	#endif /* ifndef $1 */
# define
snippet def
	#define ${1:SYMBOL} ${2:value}
# ifdef...endif
snippet ifdef
	#ifdef ${1:FOO}
	  ${2:#define }
	#endif
# if
snippet #if
	#if ${1:FOO}
	   ${0}
	#endif

# header include guard
snippet once
	#ifndef ${1:`toupper(vim_snippets#Filename('$1_H', 'UNTITLED_H'))`}

	#define $1

	${0}

	#endif /* end of include guard: $1 */

##
## Control Statements
# if
snippet if
	if (${1:cond}) {
		${0}
	}
snippet ife
	if (${1:cond}) {
		${2}
	} 
	else {
		${0}
	}
# else
snippet el
	else {
		${0}
	}
# else if
snippet elif
	else if (${1:cond}) {
		${0}
	}

# ternary
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}

# switch
snippet switch
	switch (${1:/* variable */}) {
		case ${2:/* variable case */}: {
			${3}
		}${4:break;}
		default: {
			${5}
	  }
	}

# case
snippet case
	case ${1:/* variable case */}:
		${2}
		${3:break;}
snippet ret
	return ${0};

##
## Loops
# for
snippet fori
	for (${2:i} = 0; $2 < ${1:count}; $2${3:++}) {
		${4}
	}
# while
snippet wh
	while (${1:/* condition */}) {
		${2}
	}
# do... while
snippet do
	do {
		${2}
	} while (${1:/* condition */});

#for iterator
snippet forit
	for (${1:type}::iterator it = ${2:container}.begin(); it != $2.end(); ++it) {
		${3}
	}

#for auto
snippet fora
	for (auto ${1:element} : ${2:container}) {
		${3:code}
	}
##
## Functions
# function definition
snippet fun
	${1:void} ${2:function_name}(${3})
	{
		${4}
	}
# function declaration
snippet fund
	${1:void} ${2:function_name}(${3});

snippet sep
	//
	//------------------------------------------------------------------------------
	//
	${1}
